---
description: generating a conventional commit message when commiting to git
alwaysApply: false
---

# Commit Message Formatting Rules

**When to apply**: When generating commit messages or discussing commit practices

## Commit Message Format

Use conventional commits format:

```
<type>(<scope>): <description>

[optional body]

Signed-off-by: <name> <email>
Assisted-by: <model-name> (via Cursor)
```

## Commit Types

- **feat**: New features
- **fix**: Bug fixes  
- **docs**: Documentation changes
- **style**: Code style changes
- **refactor**: Code refactoring
- **test**: Adding/updating tests
- **chore**: Maintenance tasks
- **build**: Build system or dependencies
- **ci**: CI/CD changes
- **perf**: Performance improvements
- **revert**: Revert previous commit

## Examples

```bash
feat(SRVKP-123): Add webhook controller for GitHub integration

Fixes an issue with the webhook controller for GitHub integration
```

```bash
fix(controller): Update pipeline reconciliation logic

Resolves issue with concurrent pipeline runs
```

## Gitlint Integration

- The project uses gitlint to enforce commit message format
- gitlint can be run by using this command `make run-gitlint`
- Ensure all commit messages pass gitlint validation
- Common gitlint rules to follow:
  - Conventional commit format
  - Proper line length limits
  - Required footers
  - No trailing whitespace